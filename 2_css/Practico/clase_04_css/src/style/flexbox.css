/*

    FLEXBOX: Es un sistema de distribucion de container, donde se declara a un contenedor como flexible a modo
    de poder distribuir sus hijos directos. Cuando un contenedor es flexible y quiere distribuir a sus hijos, los
    hijos de los hijos no se distribuyen. Por ende, para que el contenedor nieto se desplace, el contenedor hijo 
    tambien debe ser flexible.
    Para hacer flexible un container se necesita decalrar un display, por ende, flex es un valor posible de la 
    propiedad display.
    - display: flex

    Una vez declarado el container como flexible, un puñado de propiedades se habilitan para dicho contenedor: 
    - flex-direction: Permite declarar el orden de los hijos como filas o columnas sobre un mismo eje. Es posible
      aplicarlo de manera reversa.
        - column: Al cambiar a colum, el contenedor se da vuelta, por lo tanto, los ejes X e Y de orientacion 
          original al contenedor se invierten, quedando X sobre el eje Y, e Y sobre el eje X. 
        - row: Establecido por defecto.
        - row-reverse: Coloca los elementos en fila pero desde el lado contrario sobre el mismo eje e invertidos.
        - column-reverse: Coloca los elementos en columna pero desde el lado contrario sobre el mismo eje e invertidos.
    - justify-content: Nos permite distribuir los elementos en el eje X del contenedor.
        - center: Coloca los elementos en el centro.
        - start: Coloca los elementos a la izquierda.
        - end: Coloca los elementos a la derecha.
        La combinacion de flex-direction: row-reverse con justify-content: start, permite invertir el orden de los
        elementos, sin moverlos al lado contrario.
        - space-between: Separa los elementos y los distribuye perfectamente dejando espacios entre los elementos,
          sin dejar margenes en los laterales.
        - space-around: Separa los elementos y los distribuye perfectamente dejando espacios entre los elementos,
          dejando margenes en los laterales, pero menores a los espacios entre los elementos. Pero no deja modificar
          dicho margen.
        - space-evenly: Separa los elementos y los distribuye perfectamente dejando espacios entre los elementos,
          dejando margenes en los laterales iguales a los espacios entre los elementos. Pero no deja modificar
          dicho margen.
    - align-itmes: Nos permite distribuir los elementos en el eje Y del contenedor.
        - center: Coloca los elementos en el centro.
        - start: Coloca los elementos a la izquierda.
        - end: Coloca los elementos a la derecha.
    - flex-wrap: Nos permite decidir si queremos que, cuando los hijos del contenedor no entren dentro del ancho del 
      dispositivo, estos empiecen a pasarse o no a la fila siguiente.
    Tambien es posible movilizar los hijos por separado.
    Estas propiedades no se pueden aplicar a un elemento no declarado como flexible.

    A diferencia de flex con inline-block es que este ultimo va en cada hijo y no en el padre. Por otro lado genera
    un pequeño margen, ya que por defecto los divs lo poseen. En cambio,, flex remueve ese margen para que cualquier
    clase de margen que se decida dar, sea solamente el que nosotros colocamos, y no se sume nada que esta definido
    por defecto.

    Tarea de investigacion: 
    - flex-grow
    - flex-shrink
    - flex-basis

    Sitios:
    - https://uiverse.io/
    - https://cssreference.io/  

*/

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

/* Creamos una sola clase prefabricada para añadirle a todos los containers. 

.center{
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

.container2{
    height: 500px;
    width: 500px;
    background-color: yellow;
}

*/

.container1{
    height: 500px;
    width: 500px;
    background-color: aqua;

    /* Aca arranca flexbox */
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}


.box{
    height: 100px;
    width: 100px;
    background-color: orange;
    border: 1px solid black;
}

.dos{
    align-self: start;
}

.tres{
    align-self: end;
}

